select(FacilityName, FacilityId, State, matches("HIP-KNEE$"))
# Display first 10 rows of HCAHPS
head(HCAHPS,10)
# Filter dataset to include numeric columns only
num_vars <- HCAHPS %>%
select_if(is.numeric)
# Check for missing values
miss_vals <- sapply(num_vars, function(x) sum(is.na(x)))
print(miss_vals)
# Removing all footnote columns
HCAHPS <- HCAHPS %>%
select(-ends_with("footnote"))
# Replacing all "Not Applicable" with NA
HCAHPS <- as.data.frame(sapply(HCAHPS, function(x) {
if (is.character(x)) {
x[x == "Not Applicable"] <- NA
}
return(x)
}))
# Replacing all "Not Available" with NA
HCAHPS <- as.data.frame(sapply(HCAHPS, function(x) {
if (is.character(x)) {
x[x == "Not Available"] <- NA
}
return(x)
}))
dictHCAHPS <- tribble(
~`Measure ID`, ~`Measure Name`,
"H-CLEAN-HSP-A-P", "Patients who reported that their room and bathroom were 'Always' clean",
"H-CLEAN-HSP-SN-P", "Patients who reported that their room and bathroom were 'Sometimes' or 'Never' clean",
"H-CLEAN-HSP-U-P", "Patients who reported that their room and bathroom were 'Usually' clean",
"H-CLEAN-HSP-STAR-RATING", "Cleanliness - star rating",
"H_CLEAN_LINEAR_SCORE", "Cleanliness - linear mean score",
"H-COMP-1-A-P", "Patients who reported that their nurses 'Always' communicated well",
"H-COMP-1-SN-P", "Patients who reported that their nurses 'Sometimes' or 'Never' communicated well",
"H-COMP-1-U-P", "Patients who reported that their nurses 'Usually' communicated well",
"H-COMP-1-STAR-RATING", "Nurse communication - star rating",
"H_COMP_1_LINEAR_SCORE", "Nurse communication - linear mean score",
"H-COMP-2-A-P", "Patients who reported that their doctors 'Always' communicated well",
"H-COMP-2-SN-P", "Patients who reported that their doctors 'Sometimes' or 'Never' communicated well",
"H-COMP-2-U-P", "Patients who reported that their doctors 'Usually' communicated well",
"H-COMP-2-STAR-RATING", "Doctor communication - star rating",
"H_COMP_2_LINEAR_SCORE", "Doctor communication - linear mean score",
"H-COMP-3-A-P", "Patients who reported that they 'Always' received help as soon as they wanted",
"H-COMP-3-SN-P", "Patients who reported that they 'Sometimes' or 'Never' received help as soon as they wanted",
"H-COMP-3-U-P", "Patients who reported that they 'Usually' received help as soon as they wanted",
"H-COMP-3-STAR-RATING", "Staff responsiveness - star rating",
"H_COMP_3_LINEAR_SCORE", "Staff responsiveness - linear mean score",
"H-COMP-5-A-P", "Patients who reported that staff 'Always' explained about medicines before giving it to them",
"H-COMP-5-SN-P", "Patients who reported that staff 'Sometimes' or 'Never' explained about medicines before giving it to them",
"H-COMP-5-U-P", "Patients who reported that staff 'Usually' explained about medicines before giving it to them",
"H-COMP-5-STAR-RATING", "Communication about medicine - star rating",
"H_COMP_5_LINEAR_SCORE", "Communication about medicines - linear mean score",
"H-COMP-6-N-P", "Patients who reported that NO, they were not given information about what to do during their recovery at home",
"H-COMP-6-Y-P", "Patients who reported that YES, they were given information about what to do during their recovery at home",
"H-COMP-6-STAR-RATING", "Discharge information - star rating",
"H_COMP_6_LINEAR_SCORE", "Discharge information - linear mean score",
"H-COMP-7-A", "Patients who 'Agree' they understood their care when they left the hospital",
"H-COMP-7-D-SD", "Patients who 'Disagree' or 'Strongly Disagree' that they understood their care when they left the hospital",
"H-COMP-7-SA", "Patients who 'Strongly Agree' that they understood their care when they left the hospital",
"H-COMP-7-STAR-RATING", "Care transition - star rating",
"H_COMP_7_LINEAR_SCORE", "Care transition - linear mean score",
"H-HSP-RATING-0-6", "Patients who gave their hospital a rating of 6 or lower on a scale from 0 (lowest) to 10 (highest)",
"H-HSP-RATING-7-8", "Patients who gave their hospital a rating of 7 or 8 on a scale from 0 (lowest) to 10 (highest)",
"H-HSP-RATING-9-10", "Patients who gave their hospital a rating of 9 or 10 on a scale from 0 (lowest) to 10 (highest)",
"H-HSP-RATING-STAR-RATING", "Overall rating of hospital - star rating",
"H_HSP_RATING_LINEAR_SCORE", "Overall hospital rating - linear mean score",
"H-QUIET-HSP-A-P", "Patients who reported that the area around their room was 'Always' quiet at night",
"H-QUIET-HSP-SN-P", "Patients who reported that the area around their room was 'Sometimes' or 'Never' quiet at night",
"H-QUIET-HSP-U-P", "Patients who reported that the area around their room was 'Usually' quiet at night",
"H-QUIET-HSP-STAR-RATING", "Quietness - star rating",
"H_QUIET_LINEAR_SCORE", "Quietness - linear mean score",
"H-RECMND-DN", "Patients who reported NO, they would probably not or definitely not recommend the hospital",
"H-RECMND-DY", "Patients who reported YES, they would definitely recommend the hospital",
"H-RECMND-PY", "Patients who reported YES, they would probably recommend the hospital",
"H-RECMND-STAR-RATING", "Recommend hospital - star rating",
"H_RECMND_LINEAR_SCORE", "Recommend hospital - linear mean score",
"H-STAR-RATING", "Summary star rating"
)
dictHCAHPS %>%
kable(
format = "html",
caption = "Table 3. Measure IDs and Measure Names from HCAHPS") %>%
kable_styling(bootstrap_options = c("hover", "full_width" = F))
HCAHPSClean <- HCAHPS %>%
pivot_wider(
names_from = HcahpsMeasureId,
values_from = c(PatientSurveyStarRating, HcahpsAnswerPercent, HcahpsLinearMeanValue, SurveyResponseRatePercent),
id_cols = c(FacilityName, FacilityId, State)
)
# Check the new dataframe
dim(HCAHPSClean)
head(HCAHPSClean)
# Display first 10 rows of Timely_and_Effective_Care
head(Timely_and_Effective_Care,10)
# Filter dataset to include numeric columns only
num_vars <- Timely_and_Effective_Care %>%
select_if(is.numeric)
# Check for missing values
miss_vals <- sapply(num_vars, function(x) sum(is.na(x)))
print(miss_vals)
# Replacing all "Not Applicable" with NA
Timely_and_Effective_Care <- as.data.frame(sapply(Timely_and_Effective_Care, function(x) {
if (is.character(x)) {
x[x == "Not Applicable"] <- NA
}
return(x)
}))
# Replacing all "Not Available" with NA
Timely_and_Effective_Care <- as.data.frame(sapply(Timely_and_Effective_Care, function(x) {
if (is.character(x)) {
x[x == "Not Available"] <- NA
}
return(x)
}))
dictCare <- tribble(
~`Measure ID`, ~`Measure Name`,
"EDV", "Emergency department volume (alternate Measure ID: EDV-1)",
"ED-2", "Average (median) admit decision time to time of departure from the emergency department for emergency department patients admitted to inpatient status",
"IMM-3", "Healthcare workers given influenza vaccination",
"HCP COVID-19", "COVID-19 Vaccination Coverage Among HCP",
"OP-18b", "Average (median) time patients spent in the emergency department before leaving from the visit (alternate Measure ID: OP-18)",
"OP-18c", "Average time patients spent in the emergency department before being sent home (Median Time from ED Arrival to ED Departure for Discharged ED Patients â€“ Psychiatric/Mental Health Patients) *This measure is only found in the downloadable database, it is not displayed on Hospital Care Compare",
"OP-22", "Percentage of patients who left the emergency department before being seen",
"OP-23", "Percentage of patients who came to the emergency department with stroke symptoms who received brain scan results within 45 minutes of arrival",
"OP-29", "Percentage of patients receiving appropriate recommendation for follow-up screening colonoscopy",
"OP-31", "Percentage of patients who had cataract surgery and had improvement in visual function within 90 days following the surgery",
"SEP-1", "Severe Sepsis and Septic Shock",
"SEP-SH-3HR", "Septic Shock 3 Hour",
"SEP-SH-6HR", "Septic Shock 6 Hour",
"SEV-SEP-3HR", "Severe Sepsis 3 Hour",
"SEV-SEP-6HR", "Severe Sepsis 6 Hour",
"STK-02", "Percentage of ischemic stroke patients prescribed or continuing to take antithrombotic therapy at hospital discharge",
"STK-03", "Percentage of ischemic stroke patients with atrial fibrillation/flutter who are prescribed or continuing to take anticoagulation therapy at hospital discharge",
"STK-05", "Percentage of ischemic stroke patients administered antithrombotic therapy by the end of hospital day 2",
"STK-06", "Percentage of ischemic stroke patients who are prescribed or continuing to take statin medication at hospital discharge",
"VTE-1", "Percentage of patients that received VTE prophylaxis after hospital admission or surgery",
"VTE-2", "Percentage of patients that received VTE prophylaxis after being admitted to the intensive care unit (ICU)",
"Safe Use of Opioids", "Percentage of patients who were prescribed 2 or more opioids or an opioid and benzodiazepine concurrently at discharge"
)
dictCare %>%
kable(
format = "html",
caption = "Table 4. Measure IDs and Measure Names from Timely and Effective Care") %>%
kable_styling(bootstrap_options = c("hover", "full_width" = F))
careClean <- Timely_and_Effective_Care %>%
pivot_wider(
names_from = MeasureId,
values_from = c(Score),
id_cols = c(FacilityName, FacilityId, State)
)
# Check the new dataframe
dim(careClean)
head(careClean)
# Display first 10 rows of Complications_and_Deaths
head(Complications_and_Deaths,10)
# Filter dataset to include numeric columns only
num_vars <- Complications_and_Deaths %>%
select_if(is.numeric)
# Check for missing values
miss_vals <- sapply(num_vars, function(x) sum(is.na(x)))
print(miss_vals)
# Replacing all "Not Applicable" with NA
Complications_and_Deaths <- as.data.frame(sapply(Complications_and_Deaths, function(x) {
if (is.character(x)) {
x[x == "Not Applicable"] <- NA
}
return(x)
}))
# Replacing all "Not Available" with NA
Complications_and_Deaths <- as.data.frame(sapply(Complications_and_Deaths, function(x) {
if (is.character(x)) {
x[x == "Not Available"] <- NA
}
return(x)
}))
dictDeaths <- tribble(
~`Measure ID`, ~`Measure Name`,
"COMP-HIP-KNEE", "Rate of complications for hip/knee replacement patients",
"PSI 90", "Serious complications (this is a composite or summary measure; alternate Measure ID: PSI-90-SAFETY)",
"PSI 03", "Pressure sores (alternate Measure ID: PSI_3_Ulcer)",
"PSI 04", "Deaths among patients with serious treatable complications after surgery (alternate Measure ID: PSI-4-SURG-COMP)",
"PSI 06", "Collapsed lung due to medical treatment (alternate Measure ID: PSI-6-IAT-PTX)",
"PSI 08", "Broken hip from a fall after surgery (alternate Measure ID: PSI_8_POST_HIP)",
"PSI 09", "Postoperative hemorrhage or hematoma rate (alternate Measure ID: PSI_9_POST_HEM)",
"PSI 10", "Kidney and diabetic complications after surgery (alternate Measure ID: PSI_10_POST_KIDNEY)",
"PSI 11", "Respiratory failure after surgery (alternate Measure ID: PSI_11_POST_RESP)",
"PSI 12", "Serious blood clots after surgery (alternate Measure ID: PSI-12-POSTOP-PULMEMB-DVT)",
"PSI 13", "Blood stream infection after surgery (alternate Measure ID: PSI_13_POST_SEPSIS)",
"PSI 14", "A wound that splits open after surgery on the abdomen or pelvis (alternate Measure ID: PSI-14-POSTOP-DEHIS)",
"PSI 15", "Accidental cuts and tears from medical treatment (alternate Measure ID: PSI-15-ACC-LAC)",
"MORT-30-AMI", "Death rate for heart attack patients",
"MORT-30-CABG", "Death rate for Coronary Artery Bypass Graft (CABG) surgery patients",
"MORT-30-COPD", "Death rate for chronic obstructive pulmonary disease (COPD) patients",
"MORT-30-HF", "Death rate for heart failure patients",
"MORT-30-PN", "Death rate for pneumonia patients",
"MORT-30-STK", "Death rate for stroke patients"
)
dictDeaths %>%
kable(
format = "html",
caption = "Table 5. Measure IDs and Measure Names from Complications and Deaths") %>%
kable_styling(bootstrap_options = c("hover", "full_width" = F))
deathsClean <- Complications_and_Deaths %>%
pivot_wider(
names_from = MeasureId,
values_from = c(ComparedToNational, Score),
id_cols = c(FacilityName, FacilityId, State)
)
# Check the new dataframe
dim(deathsClean)
head(deathsClean)
# Display first 10 rows of Payment_and_Value_of_Care
head(Payment_and_Value_of_Care,10)
# Filter dataset to include numeric columns only
num_vars <- Payment_and_Value_of_Care %>%
select_if(is.numeric)
# Check for missing values
miss_vals <- sapply(num_vars, function(x) sum(is.na(x)))
print(miss_vals)
# Replacing all "Not Applicable" with NA
Payment_and_Value_of_Care <- as.data.frame(sapply(Payment_and_Value_of_Care, function(x) {
if (is.character(x)) {
x[x == "Not Applicable"] <- NA
}
return(x)
}))
# Replacing all "Not Available" with NA
Payment_and_Value_of_Care <- as.data.frame(sapply(Payment_and_Value_of_Care, function(x) {
if (is.character(x)) {
x[x == "Not Available"] <- NA
}
return(x)
}))
dictPayment <- tribble(
~`Measure ID`, ~`Measure Name`,
"PAYM-30-AMI", "Payment for heart attack patients",
"PAYM-30-HF", "Payment for heart failure patients",
"PAYM-30-PN", "Payment for pneumonia patients",
"PAYM_90_HIP_KNEE", "Payment for hip/knee replacement patients"
)
dictPayment %>%
kable(
format = "html",
caption = "Table 6. Measure IDs and Measure Names from Payment and Value of Care") %>%
kable_styling(bootstrap_options = c("hover", "full_width" = F))
paymentClean <- Payment_and_Value_of_Care %>%
pivot_wider(
names_from = PaymentMeasureId,
values_from = c(PaymentCategory, Payment),
id_cols = c(FacilityName, FacilityId, State)
)
# Check the new dataframe
dim(paymentClean)
head(paymentClean)
paymentClean <- paymentClean %>%
select(FacilityName, FacilityId, State, matches("HIP_KNEE$"))
HipKneeClean <- readmissionsClean %>%
full_join(HCAHPSClean, by = "FacilityId") %>%
full_join(careClean, by = "FacilityId") %>%
full_join(deathsClean, by = "FacilityId") %>%
full_join(paymentClean, by = "FacilityId")
head(HipKneeClean)
# Removing duplicate columns
HipKneeClean <- HipKneeClean %>%
select(-matches("\\.(x|y|z|w|v)$"))
# Checking the dimensions
dim(HipKneeClean)
# Count NA values in each column
na_counts <- sapply(HipKneeClean, function(x) sum(is.na(x)))
# View the NA counts
print(na_counts)
# Calculate the percentage of NA values for each column
na_percentage <- sapply(HipKneeClean, function(x) mean(is.na(x)))
# Remove columns where more than 80% of the values are NA
HipKneeClean <- HipKneeClean[, na_percentage <= 0.8]
# Count NA values in each column
na_counts <- sapply(HipKneeClean, function(x) sum(is.na(x)))
# View the NA counts
print(na_counts)
# Check the dimensions
dim(HipKneeClean)
# Remove columns containing 'AnswerPercent' or 'SurveyResponseRate'
HipKneeClean <- HipKneeClean %>%
select(-matches("AnswerPercent|SurveyResponseRate"))
# Check the dimensions
dim(HipKneeClean)
# Remove columns containing 'ComparedToNational' and 'PaymentCategory'
HipKneeClean <- HipKneeClean %>%
select(-matches("ComparedToNational|PaymentCategory"))
# Check the dimensions
dim(HipKneeClean)
str(HipKneeClean)
# Convert columns to numeric
HipKneeClean <- HipKneeClean %>%
mutate_at(vars(starts_with("PatientSurveyStarRating_"),
starts_with("HcahpsLinearMeanValue_"),
starts_with("Score_"),
starts_with("ED_"),
starts_with("IMM_"),
starts_with("OP_"),
starts_with("SEP_"),
starts_with("SEV_"),
starts_with("STK_"),
starts_with("VTE_"),
starts_with("SAFE_"),
starts_with("HCP_")),
~ as.numeric(as.character(.)))
# View the structure
str(HipKneeClean)
# Remove $ and , and convert to numeric
HipKneeClean <- HipKneeClean %>%
mutate_at(vars(starts_with("Payment_")),
~ as.numeric(gsub("[\\$,]", "", .)))
# Checking the structure
str(HipKneeClean)
save(HipKneeClean, file = "HipKneeClean.RData")
# Select numeric columns
numeric_columns <- select_if(HipKneeClean, is.numeric)
# Calculate descriptive statistics
descr_stats <- psych::describe(numeric_columns)
# Convert to a data frame
descr_stats_df <- as.data.frame(descr_stats)
# Display the table
kable(descr_stats_df, format = "html", caption = "Table 6. Descriptive Statistics for Numeric Variables in Cleaned Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Visualizing the distribution of EDV (Emergency Department Volume)
ggplot(HipKneeClean, aes(x = EDV)) +
geom_bar(fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Figure 1. Distribution of Emergency Department Volume",
x = "EDV",
y = "Count") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Data preparation
facility_counts <- HipKneeClean %>%
group_by(State) %>%
summarise(Count = n(), .groups = 'drop')
# Check the first few rows
head(facility_counts)
# Get state boundaries
states_map <- map_data("state")
# Create a mapping from state abbreviations to full state names
state_mapping <- data.frame(
State = state.abb,
full_state_name = tolower(state.name),
stringsAsFactors = FALSE
)
# Add full state names to facility_counts
facility_counts <- merge(facility_counts, state_mapping, by.x = "State", by.y = "State")
# Join facility counts with state map data
facility_map_data <- left_join(states_map, facility_counts, by = c("region" = "full_state_name"))
# Replace NA values with 0 in the Count column
facility_map_data$Count[is.na(facility_map_data$Count)] <- 0
# Plot the map with facility counts
ggplot(data = facility_map_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Count), color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50", name = "Facility Count") +
theme_minimal() +
labs(title = "Figure 2. Number of Facilities per State") +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank())
# Rename column
HipKneeClean <- HipKneeClean %>%
rename(PredictedReadmissionRate_HIP_KNEE = `PredictedReadmissionRate_HIP-KNEE`)
# Calculate the average PredictedReadmissionRate_HIP-KNEE per state
average_readmission_rate <- HipKneeClean %>%
group_by(State) %>%
summarize(Average_PredictedReadmissionRate_HIP_KNEE = mean(PredictedReadmissionRate_HIP_KNEE, na.rm = TRUE))
# Add full state names to the average readmission rate data
average_readmission_rate <- merge(average_readmission_rate, state_mapping, by.x = "State", by.y = "State")
# Join average readmission rate with state map data
readmission_map_data <- left_join(states_map, average_readmission_rate, by = c("region" = "full_state_name"))
# Plot the map with average readmission rates
ggplot(data = readmission_map_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Average_PredictedReadmissionRate_HIP_KNEE), color = "white") +
scale_fill_gradient(low = "lightgreen", high = "darkgreen", name = "Average Predicted\nReadmission Rate") +
theme_minimal() +
labs(title = "Figure 3. Average Predicted Readmission Rate for Hip/Knee Replacement per State") +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank())
# Create a histogram of PredictedReadmissionRate_HIP_KNEE
ggplot(HipKneeClean, aes(x = PredictedReadmissionRate_HIP_KNEE)) +
geom_histogram(binwidth = 0.25, fill = "skyblue", color = "black") +
labs(title = "Figure 4. Histogram of Predicted Readmission Rate for Hip/Knee Replacement",
x = "Predicted Readmission Rate",
y = "Frequency") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Calculate missing values
missing_values_summary <- HipKneeClean %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count") %>%
mutate(Missing_Percentage = (Missing_Count / nrow(HipKneeClean)) * 100)
# Print the table using kable
missing_values_summary %>%
kable(caption = "Table 7. Missing Values Summary") %>%
kable_styling(bootstrap_options = c("hover", "striped", "responsive"))
# Compute correlation matrix
cor_matrix <- cor(HipKneeClean %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Melt the correlation matrix into a long format
cor_melted <- melt(cor_matrix)
# Plot the heatmap
ggplot(cor_melted, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Figure 5. Correlation Heatmap of Numeric Variables")
# Convert the correlation matrix to a data frame
cor_table <- as.data.frame(cor_matrix)
# Add variable names as a column for better readability
cor_table$Variable <- rownames(cor_table)
# Reorder columns for better readability
cor_table <- cor_table %>%
select(Variable, everything())
# Print the table using kable
cor_table %>%
kable(caption = "Table 8. Correlation Coefficients Table") %>%
kable_styling(bootstrap_options = c("hover", "striped", "responsive"))
# Create function to find categorical variables
is_categorical <- function(x) is.factor(x) | is.character(x)
# Apply function to all variables in the dataset
categorical_vars <- sapply(HipKneeClean, is_categorical)
# Print the names of all categorical variables
categorical <- names(HipKneeClean)[categorical_vars]
categorical
# Define the encoding mapping (ignore NAs for now)
encoding_map <- c(
'low' = 1,
'medium' = 2,
'high' = 3,
'very high' = 4
)
# Dummy encoding used due to ordinal nature of this data
# Create a copy of HipKneeClean and name it HipKneeTrain to separate cleaned dataset and the training dataset
HipKneeTrain <- HipKneeClean %>%
mutate(EDV = recode(EDV, !!!encoding_map))
# Print first 20 rows of EDV column in HipKneeClean and HipKneeTrain to ensure proper encoding
cat("HipKneeClean")
print(head(HipKneeClean$EDV, 20))
cat("HipKneeTrain")
print(head(HipKneeTrain$EDV, 20))
save.image("~/Desktop/Data Science/DSE 6311/Encoding_Environment.RData")
load("~/Desktop/Data Science/DSE 6311/Encoding_Environment.RData")
knitr::opts_chunk$set(echo = TRUE,
cache = FALSE,
cache.comments = TRUE,
size = 13)
# Define the manual mapping of state abbreviations to numbers with leading zeros
state_mapping <- c(
"AL" = "001",
"AK" = "002",
"AZ" = "003",
"AR" = "004",
"CA" = "005",
"CO" = "006",
"CT" = "007",
"DE" = "008",
"FL" = "009",
"GA" = "010",
"HI" = "011",
"ID" = "012",
"IL" = "013",
"IN" = "014",
"IA" = "015",
"KS" = "016",
"KY" = "017",
"LA" = "018",
"ME" = "019",
"MD" = "020",
"MA" = "021",
"MI" = "022",
"MN" = "023",
"MS" = "024",
"MO" = "025",
"MT" = "026",
"NE" = "027",
"NV" = "028",
"NH" = "029",
"NJ" = "030",
"NM" = "031",
"NY" = "032",
"NC" = "033",
"ND" = "034",
"OH" = "035",
"OK" = "036",
"OR" = "037",
"PA" = "038",
"RI" = "039",
"SC" = "040",
"SD" = "041",
"TN" = "042",
"TX" = "043",
"UT" = "044",
"VT" = "045",
"VA" = "046",
"WA" = "047",
"WV" = "048",
"WI" = "049",
"WY" = "050"
)
# Apply the mapping to the State column
HipKneeTrain <- HipKneeTrain %>%
mutate(State = state_mapping[State])
