summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count") %>%
mutate(Missing_Percentage = (Missing_Count / nrow(HipKneeTest)) * 100)
# Print table
missing_values_summary %>%
kable(caption = "Table 7. Missing Values Summary") %>%
kable_styling(bootstrap_options = c("hover", "striped", "responsive"))
# Calculate median for columns with <5% missing values
numeric_vars_low_missing <- c("HcahpsLinearMeanValue_H_HSP_RATING_LINEAR_SCORE", "EDV", "HCP_COVID_19", "IMM_3", "OP_18b", "SAFE_USE_OF_OPIOIDS", "Score_COMP_HIP_KNEE", "Score_PSI_03", "Score_PSI_06", "Score_PSI_08", "Score_PSI_09", "Score_PSI_10", "Score_PSI_11", "Score_PSI_12", "Score_PSI_13", "Score_PSI_14", "Score_PSI_15", "Payment_PAYM_90_HIP_KNEE")
for (var in numeric_vars_low_missing) {
HipKneeTest[[var]][is.na(HipKneeTest[[var]])] <- median(HipKneeTest[[var]], na.rm = TRUE)
}
# Select high missingness variables for KNN imputation
vars_for_knn <- c("VTE_1", "Score_MORT_30_AMI", "Score_MORT_30_COPD", "Score_MORT_30_HF", "Score_MORT_30_PN", "Score_MORT_30_STK", "Score_PSI_04", "OP_29")
# Perform KNN imputation
HipKneeTest_knn <- kNN(HipKneeTest, variable = vars_for_knn, k = 5)
# Remove columns created by the KNN function
HipKneeTest_knn <- HipKneeTest_knn %>% select(-ends_with("_imp"))
# Update HipKneeTrain with imputed values
HipKneeTest[vars_for_knn] <- HipKneeTest_knn[vars_for_knn]
# Calculate missing values
missing_values_summary <- HipKneeTest %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count") %>%
mutate(Missing_Percentage = (Missing_Count / nrow(HipKneeTest)) * 100)
# Print table
missing_values_summary %>%
kable(caption = "Table 7. Missing Values Summary") %>%
kable_styling(bootstrap_options = c("hover", "striped", "responsive"))
# Average death rates amongst mortality variables and create new column "Score_Ovr_MORT"
HipKneeTest$Score_Ovr_MORT <- rowMeans(HipKneeTest[, c("Score_MORT_30_AMI",
"Score_MORT_30_COPD",
"Score_MORT_30_HF",
"Score_MORT_30_PN",
"Score_MORT_30_STK")],
na.rm = TRUE)
# Remove old mortality columns
HipKneeTest <- HipKneeTest[, !(names(HipKneeTest) %in% c("Score_MORT_30_AMI",
"Score_MORT_30_COPD",
"Score_MORT_30_HF",
"Score_MORT_30_PN",
"Score_MORT_30_STK"))]
# Compute correlation matrix
cor_matrix <- cor(HipKneeTest %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Melt the correlation matrix into a long format
cor_melted <- melt(cor_matrix)
# Plot heatmap
ggplot(cor_melted, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Figure 5. Correlation Heatmap of Numeric Variables")
save(HipKneeTest, file = "HipKneeTest.RData")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
print(descr_stats)
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create boxplots
ggplot(numeric_melted, aes(x = variable, y = value)) +
geom_boxplot(fill = "blue", color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplots of Numeric Variables", x = "Variable", y = "Value")
# Define the data dictionary
data_dictionary <- data.frame(
Measure_ID = c("FacilityId*", "FacilityName", "State", "ExcessReadmissionRatio_HIP-KNEE",
"PredictedReadmissionRate_HIP_KNEE*", "ExpectedReadmissionRate_HIP-KNEE",
"NumberOfReadmissions_HIP-KNEE", "H_HSP_RATING_LINEAR_SCORE*",
"H_RECMND_LINEAR_SCORE", "EDV*", "ED_2", "IMM_3*", "HCP_COVID_19*",
"OP_18b*", "OP_18c", "OP_22", "OP_23", "OP_29*", "SAFE_USE_OF_OPIOIDS*",
"SEP_1", "SEP_SH_3HR", "SEP_SH_6HR", "SEV_SEP_3HR", "SEV_SEP_6HR",
"STK_02", "STK_05", "STK_06", "VTE_1*", "VTE_2", "Score_COMP_HIP_KNEE*",
"Score_MORT_30_AMI", "Score_MORT_30_COPD", "Score_MORT_30_HF",
"Score_MORT_30_PN", "Score_MORT_30_STK", "Score_Ovr_MORT*",
"Score_PSI_03*", "Score_PSI_04*", "Score_PSI_06*", "Score_PSI_08*",
"Score_PSI_09*", "Score_PSI_10*", "Score_PSI_11*", "Score_PSI_12*",
"Score_PSI_13*", "Score_PSI_14*", "Score_PSI_15*", "Score_PSI_90",
"Payment_PAYM_90_HIP_KNEE*"),
Description = c("Unique facility identifier.", "Name of the facility.", "State where the facility is located.",
"The ratio of the predicted readmission rate to the expected readmission rate, based on an average hospital with similar patients. Performance is compared against a ratio of one, such that below one is better and above one is worse in terms of readmission rates.",
"The number of readmissions within 30 days predicted based on the hospital’s performance with its observed case mix. The predicted number of readmissions is estimated using a hospital-specific intercept, and is intended to reflect the annual expected performance of the hospital given its historical case and patient mix and performance.",
"The expected number of readmissions in each hospital is estimated using its patient mix and an average hospital-specific intercept. It is thus indirectly standardized to other hospitals with similar case and patient mixes.",
"Crude number of readmissions in each hospital within 30 days.",
"Overall hospital rating - linear mean score. Employs all survey response items in each HCAHPS measure and are converted and combined into a 0-100 linear-scaled measure score.",
"Recommend hospital - linear mean score. From question: Would you recommend this hospital to your friends and family?",
"Emergency department volume. Number based on the volume of patients submitted by a hospital used for the measure OP-22: Left without Being Seen.",
"Average (median) admit decision time to time of departure from the emergency department for emergency department patients admitted to inpatient status.",
"Healthcare workers given influenza vaccination.",
"COVID-19 vaccination coverage among healthcare providers.",
"Average (median) time patients spent in the emergency department before leaving from the visit.",
"Average time patients spent in the emergency department before being sent home (Median Time from ED Arrival to ED Departure for Discharged ED Patients – Psychiatric/Mental Health Patients).",
"Percentage of patients who left the emergency department before being seen.",
"Percentage of patients who came to the emergency department with stroke symptoms who received brain scan results within 45 minutes of arrival.",
"Percentage of patients receiving appropriate recommendation for follow-up screening colonoscopy.",
"Percentage of patients who were prescribed 2 or more opioids or an opioid and benzodiazepine concurrently at discharge.",
"Severe sepsis and septic shock.",
"Septic shock 3 hour.",
"Septic shock 6 hour.",
"Severe sepsis 3 hour.",
"Severe sepsis 6 hour.",
"Percentage of ischemic stroke patients prescribed or continuing to take antithrombotic therapy at hospital discharge.",
"Percentage of ischemic stroke patients administered antithrombotic therapy by the end of hospital day 2.",
"Percentage of ischemic stroke patients who are prescribed or continuing to take statin medication at hospital discharge.",
"Percentage of patients that received VTE prophylaxis after hospital admission or surgery.",
"Percentage of patients that received VTE prophylaxis after being admitted to the intensive care unit (ICU).",
"Rate of complications for hip/knee replacement patients.",
"Death rate for heart attack patients.",
"Death rate for chronic obstructive pulmonary disease (COPD) patients.",
"Death rate for heart failure patients.",
"Death rate for pneumonia patients.",
"Death rate for stroke patients.",
"Summary measure (row-wise mean) of Score_MORT_30_AMI, Score_MORT_30_COPD, Score_MORT_30_HF, Score_MORT_30_PN, and Score_MORT_30_STK.",
"Rate of pressure sores.",
"Deaths among patients with serious treatable complications after surgery.",
"Collapsed lung due to medical treatment.",
"Broken hip from a fall after surgery.",
"Postoperative hemorrhage or hematoma rate.",
"Kidney and diabetic complications after surgery.",
"Respiratory failure after surgery.",
"Serious blood clots after surgery.",
"Blood stream infection after surgery.",
"A wound that splits open after surgery on the abdomen or pelvis.",
"Accidental cuts and tears from medical treatment.",
"Serious complications (this is a composite or summary measure).",
"Payment for hip/knee replacement - estimates of payments associated with a 90-day episode of care for hip/knee replacement.")
)
# Create the table
kable(data_dictionary, caption = "Data Dictionary<br><i>* indicates measure utilized in final dataset</i>") %>%
kable_styling(full_width = F, position = "center", bootstrap_options = c("striped", "hover", "condensed"))
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Create a kable table from the descriptive statistics
descr_table <- kable(descr_stats, format = "html",
caption = "Descriptive Statistics for HipKneeTrain",
col.names = c("Variable", "N", "Mean", "SD", "Min", "Max"),
digits = 2) %>%
kable_styling(full_width = F,
position = "center",
font_size = 12) %>%
scroll_box(width = "100%", height = "400px")
str(descr_stats)
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Create a kable table from the descriptive statistics
descr_table <- kable(descr_stats, format = "html",
caption = "Descriptive Statistics for HipKneeTrain",
col.names = c("Variable", "N", "Mean", "SD", "Median", "Trimmed Mean",
"MAD", "Min", "Max", "Range", "Skew", "Kurtosis", "SE"),
digits = 2) %>%
kable_styling(full_width = F,
position = "center",
font_size = 12) %>%
scroll_box(width = "100%", height = "400px")
# Print the table
print(descr_table)
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create boxplots
ggplot(numeric_melted, aes(x = variable, y = value)) +
geom_boxplot(fill = "blue", color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplots of Numeric Variables", x = "Variable", y = "Value")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
descr_stats <- descr_stats %>% select(-Facility_ID)
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
descr_stats <- descr_stats %>% filter(vars != <Facility_ID_Value>)
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
descr_stats <- descr_stats %>% filter(vars != <FacilityID>)
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the row with Facility ID value
descr_stats_filtered <- descr_stats %>% filter(vars != 1)
# Create a kable table from the descriptive statistics
descr_table <- kable(descr_stats, format = "html",
caption = "Descriptive Statistics for HipKneeTrain",
col.names = c("Variable", "N", "Mean", "SD", "Median", "Trimmed Mean",
"MAD", "Min", "Max", "Range", "Skew", "Kurtosis", "SE"),
digits = 2) %>%
kable_styling(full_width = F,
position = "center",
font_size = 12) %>%
scroll_box(width = "100%", height = "400px")
# Print the table
print(descr_table)
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create boxplots
ggplot(numeric_melted, aes(x = variable, y = value)) +
geom_boxplot(fill = "blue", color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplots of Numeric Variables", x = "Variable", y = "Value")
View(descr_stats_filtered)
View(descr_stats)
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the row with Facility ID value
descr_stats <- descr_stats %>% filter(vars != 1)
# Create a kable table from the descriptive statistics
descr_table <- kable(descr_stats, format = "html",
caption = "Descriptive Statistics for HipKneeTrain",
col.names = c("Variable", "N", "Mean", "SD", "Median", "Trimmed Mean",
"MAD", "Min", "Max", "Range", "Skew", "Kurtosis", "SE"),
digits = 2) %>%
kable_styling(full_width = F,
position = "center",
font_size = 12) %>%
scroll_box(width = "100%", height = "400px")
# Print the table
print(descr_table)
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create boxplots
ggplot(numeric_melted, aes(x = variable, y = value)) +
geom_boxplot(fill = "blue", color = "black") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Boxplots of Numeric Variables", x = "Variable", y = "Value")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the row with Facility ID value
descr_stats <- descr_stats %>% filter(vars != 1)
# Create a kable table from the descriptive statistics
descr_table <- kable(descriptive_stats, format = "html", caption = "Descriptive Statistics for HipKneeTrain", col.names = c("Variable", "N", "Mean", "SD", "Median", "Trimmed Mean",
"MAD", "Min", "Max", "Range", "Skew", "Kurtosis", "SE"),
digits = 2))
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the row with Facility ID value
descr_stats <- descr_stats %>% filter(vars != 1)
# Create a kable table from the descriptive statistics
descr_table <- kable(descriptive_stats, format = "html", caption = "Descriptive Statistics for HipKneeTrain", col.names = c("Variable", "N", "Mean", "SD", "Median", "Trimmed Mean",
"MAD", "Min", "Max", "Range", "Skew", "Kurtosis", "SE"),
digits = 2)
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the row with Facility ID value
descr_stats <- descr_stats %>% filter(vars != 1)
# Create a kable table from the descriptive statistics
descr_table <- kable(descr_stats, format = "html", caption = "Descriptive Statistics for HipKneeTrain", col.names = c("Variable", "N", "Mean", "SD", "Median", "Trimmed Mean",
"MAD", "Min", "Max", "Range", "Skew", "Kurtosis", "SE"),
digits = 2)
# Print the table
print(descr_table)
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for HipKneeTrain")
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for all numeric variables in final dataset")
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html",
caption = "Descriptive Statistics for All Numeric Variables in Final Dataset") %>%
kable_styling(full_width = TRUE,
position = "center",
font_size = 12,
bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, width = "5em") %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%
add_header_above(c(" " = 1, "Descriptive Statistics" = ncol(descr_stats)-1))
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for all numeric variables in final dataset") %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive")
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, width = "5em") %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%
add_header_above(c(" " = 1, "Descriptive Statistics" = ncol(descr_stats) - 1))
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for all numeric variables in final dataset") %>% kable_styling(bootstrap_options = c("hover", "striped", "responsive")
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for all numeric variables in final dataset")
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for all numeric variables in final dataset") %>%
kable_styling(
bootstrap_options = c("hover", "striped", "responsive")
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, width = "5em") %>%
row_spec(0, bold = TRUE, background = "#f2f2f2")
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for All Numeric Variables in Final Dataset") %>%
kable_styling(
bootstrap_options = c("hover", "striped", "responsive")
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, width = "5em") %>%
row_spec(0, bold = TRUE, background = "#f2f2f2")
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
# Create a data frame with the variable names and justifications
removed_vars <- data.frame(
Variable = c("OP_18c", "OP_22", "ED_2_Strata_1", "OP_23", "VTE_2",
"STK_02", "STK_05", "STK_06", "HcahpsLinearMeanValue_H_RECMND_LINEAR_SCORE",
"ExcessReadmissionRatio_HIP-KNEE", "ExpectedReadmissionRate_HIP-KNEE",
"NumberOfReadmissions_HIP-KNEE", "Sepsis Variables", "Score_PSI_90",
"Patient Survey Data"),
Justification = c("Removed due to high correlation and low relevance.",
"Removed due to high correlation and low relevance.",
"Removed due to high percentage of missingness.",
"Removed due to high percentage of missingness.",
"Removed due to high percentage of missingness.",
"Removed as stroke data is not relevant to Hip/Knee Surgery.",
"Removed as stroke data is not relevant to Hip/Knee Surgery.",
"Removed as stroke data is not relevant to Hip/Knee Surgery.",
"Removed due to strong correlation with overall hospital rating.",
"Removed due to high correlation with target variable.",
"Removed due to high correlation with target variable.",
"Removed as it is influenced by hospital size, which is not available.",
"Removed due to unclear definition in dataset dictionary.",
"Removed because it is a summary of other PSI variables, making it redundant.",
"Removed due to collinearity and redundancy with other patient survey metrics.")
)
# Print the table
removed_vars %>%
kable(caption = "Table: Justifications for Removal of Variables") %>%
kable_styling(bootstrap_options = c("hover", "striped", "responsive"))
# Compute correlation matrix
cor_matrix <- cor(HipKneeClean %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Melt the correlation matrix into a long format
cor_melted <- melt(cor_matrix)
# Plot heatmap
ggplot(cor_melted, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Figure 1. Correlation Heatmap of Numeric Variables Before Preprocessing")
# Compute correlation matrix
cor_matrix <- cor(HipKneeTrain %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Melt the correlation matrix into a long format
cor_melted <- melt(cor_matrix)
# Plot heatmap
ggplot(cor_melted, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Figure 2. Correlation Heatmap of Numeric Variables After Preprocessing")
# Create a summary table of descriptive statistics
descr_stats <- describe(HipKneeTrain)
# Remove the rows with Facility ID, State and State code, and facility name
descr_stats <- descr_stats %>% filter(vars != c(1, 23, 24, 26))
# Remove columns 1, 2, 5, and 6
descr_stats <- descr_stats[, -c(1, 2, 5, 6)]
# Create a table with kable
kable(descr_stats, format = "html", caption = "Descriptive Statistics for All Numeric Variables in Final Dataset") %>%
kable_styling(
bootstrap_options = c("hover", "striped", "responsive")
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, width = "5em") %>%
row_spec(0, bold = TRUE, background = "#f2f2f2")
# Select numeric columns
numeric_columns <- HipKneeTrain %>% select_if(is.numeric)
# Melt the data for easier plotting with ggplot2
numeric_melted <- melt(numeric_columns)
# Create histograms
ggplot(numeric_melted, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~variable, scales = "free_x") +
theme_minimal() +
labs(title = "Histograms of Numeric Variables", x = "Value", y = "Frequency")
